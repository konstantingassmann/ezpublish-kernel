<?php
/**
 * @copyright Copyright (C) eZ Systems AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 */
namespace eZ\Publish\Core\REST\Server\HttpCache\Controller;

use eZ\Publish\Core\REST\Server\Values\CachedValue;
use eZ\Publish\Core\REST\Server\Values\RestLocation;
use Symfony\Component\HttpFoundation\Request;

class LocationController extends AbstractController
{
    /**
     * @var \eZ\Publish\Core\REST\Server\Controller\Location
     */
    private $innerController;

    public function __construct($innerController)
    {
        $this->innerController = $innerController;
    }

    public function redirectLocation(Request $request)
    {
        return $this->innerController->redirectLocation($request); // TODO: Change the autogenerated stub
    }

    public function createLocation($contentId, Request $request)
    {
        return $this->innerController->createLocation($contentId, $request);
    }

    public function loadLocation($locationPath)
    {
        $restLocation = $this->innerController->loadLocation($locationPath);

        return new CachedValue(
            $restLocation,
            $this->getCacheTagsForLocation($restLocation->location)
        );
    }

    public function deleteSubtree($locationPath)
    {
        return $this->innerController->deleteSubtree($locationPath);
    }

    public function copySubtree($locationPath, Request $request)
    {
        return $this->innerController->copySubtree($locationPath, $request);
    }

    public function moveSubtree($locationPath, Request $request)
    {
        return $this->innerController->moveSubtree($locationPath, $request);
    }

    public function swapLocation($locationPath, Request $request)
    {
        return $this->innerController->swapLocation($locationPath, $request);
    }

    public function loadLocationByRemoteId(Request $request)
    {
        return $this->innerController->loadLocationByRemoteId($request); // TODO: Change the autogenerated stub
    }

    public function loadLocationsForContent($contentId, Request $request)
    {
        $locationList = $this->innerController->loadLocationsForContent($contentId, $request);

        return new CachedValue(
            $locationList,
            [
                'location' => array_map(
                    function (RestLocation $location) {
                        return $location->location->id;
                    },
                    $locationList->locations
                ),
                'content' => $contentId,
            ]
        );
    }

    public function loadLocationChildren($locationPath, Request $request)
    {
        $children = $this->innerController->loadLocationChildren($locationPath, $request);

        // cache expires when the location's path is affected
        $pathArray = explode('/', trim($locationPath, '/'));
        $locationId = array_pop($pathArray);

        return new CachedValue(
            $children,
            [
                'path' => $locationId,
                'location' => $locationId,
            ]
        );
    }

    public function updateLocation($locationPath, Request $request)
    {
        return $this->innerController->updateLocation($locationPath, $request);
    }
}
