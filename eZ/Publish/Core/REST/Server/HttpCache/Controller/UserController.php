<?php
/**
 * @copyright Copyright (C) eZ Systems AS. All rights reserved.
 * @license For full copyright and license information view LICENSE file distributed with this source code.
 */
namespace eZ\Publish\Core\REST\Server\HttpCache\Controller;

use eZ\Publish\API\Repository\Values\Content\ContentInfo;
use eZ\Publish\Core\REST\Server\Values\CachedValue;
use Symfony\Component\HttpFoundation\Request;

class UserController extends AbstractController
{
    /**
     * @var \eZ\Publish\Core\REST\Server\Controller\User
     */
    private $innerController;

    public function __construct($innerController)
    {
        $this->innerController = $innerController;
    }

    public function loadRootUserGroup()
    {
        $group = $this->innerController->loadRootUserGroup();

        return new CachedValue(
            $group,
            ['path' => 5, 'location' => 5]
        );
    }

    public function loadUserGroup($groupPath)
    {
        $group = $this->innerController->loadUserGroup($groupPath);

        return new CachedValue(
            $group,
            array_merge(
                $this->getCacheTagsForContentInfo($group->contentInfo),
                ['path' => $group->mainLocation->path]
            )
        );
    }

    public function loadUser($userId)
    {
        $user = $this->innerController->loadUser($userId);

        return new CachedValue(
            $user,
            array_merge(
                $this->getCacheTagsForContentInfo($user->contentInfo),
                ['path' => $user->mainLocation->path]
            )
        );
    }

    public function createUserGroup($groupPath, Request $request)
    {
        return $this->innerController->createUserGroup($groupPath, $request);
    }

    public function createUser($groupPath, Request $request)
    {
        return $this->innerController->createUser($groupPath, $request);
    }

    public function updateUserGroup($groupPath, Request $request)
    {
        return $this->innerController->updateUserGroup($groupPath, $request);
    }

    public function updateUser($userId, Request $request)
    {
        return $this->innerController->updateUser($userId, $request);
    }

    public function deleteUserGroup($groupPath)
    {
        return $this->innerController->deleteUserGroup($groupPath);
    }

    public function deleteUser($userId)
    {
        return $this->innerController->deleteUser($userId);
    }

    public function loadUsers(Request $request)
    {
        $usersList = $this->innerController->loadUsers($request);

        $tags = [];
        foreach ($usersList->users as $user) {
            $tags = array_merge_recursive(
                $tags,
                $this->getCacheTagsForContentInfo($user->contentInfo)
            );
        }

        return new CachedValue($usersList, $tags);
    }

    public function verifyUsers(Request $request)
    {
        $users = $this->innerController->verifyUsers($request);

        $tags = [];
        foreach ($users as $user) {
            $tags = array_merge_recursive(
                $tags,
                $this->getCacheTagsForContentInfo($user->contentInfo)
            );
        }

        return new CachedValue($users, $tags);
    }

    public function loadUsersAssignedToRole($roleId)
    {
        $users = $this->innerController->loadUsersAssignedToRole($roleId);

        $tags = [];
        foreach ($users as $user) {
            $tags = array_merge_recursive(
                $tags,
                $this->getCacheTagsForContentInfo($user->contentInfo)
            );
        }

        return new CachedValue($users, $tags);
    }

    public function loadUserGroups(Request $request)
    {
        $groups = $this->innerController->loadUserGroups($request);

        $tags = [];
        foreach ($groups->userGroups as $userGroup) {
            $tags = array_merge_recursive(
                $tags,
                $this->getCacheTagsForContentInfo($userGroup->contentInfo)
            );
        }

        return new CachedValue($groups, $tags);
    }

    public function loadUserGroupByRemoteId(Request $request)
    {
        $group = $this->innerController->loadUserGroupByRemoteId($request); // TODO: Change the autogenerated stub

        return new CachedValue(
            $group,
            $this->getCacheTagsForContentInfo($group->contentInfo)
        );
    }

    public function loadUserGroupsAssignedToRole($roleId)
    {
        $groups = $this->innerController->loadUserGroupsAssignedToRole($roleId);

        $tags = [];
        foreach ($groups->userGroups as $userGroup) {
            $tags = array_merge_recursive(
                $tags,
                $this->getCacheTagsForContentInfo($userGroup->contentInfo)
            );
        }

        return new CachedValue($groups, $tags);
    }

    public function loadUserDrafts($userId, Request $request)
    {
        $versionsList = $this->innerController->loadUserDrafts($userId, $request);

        $tags = [];
        foreach ($versionsList->versions as $versionInfo) {
            $tags = array_merge_recursive(
                $tags,
                $this->getCacheTagsForContentInfo($versionInfo->contentInfo)
            );
        }

        return new CachedValue($versionsList, $tags);
    }

    public function moveUserGroup($groupPath, Request $request)
    {
        return $this->innerController->moveUserGroup($groupPath, $request);
    }

    public function loadSubUserGroups($groupPath, Request $request)
    {
        $userGroups = $this->innerController->loadSubUserGroups($groupPath, $request);

        $tags = [];
        foreach ($userGroups->userGroups as $userGroup) {
            $tags = array_merge_recursive(
                $tags,
                $this->getCacheTagsForContentInfo($userGroup->contentInfo)
            );
        }

        return new CachedValue($userGroups, $tags);
    }

    public function loadUserGroupsOfUser($userId, Request $request)
    {
        $userGroups = $this->innerController->loadUserGroupsOfUser($userId, $request);

        $tags = [];
        foreach ($userGroups->userGroups as $userGroup) {
            $tags = array_merge_recursive(
                $tags,
                $this->getCacheTagsForContentInfo($userGroup->contentInfo)
            );
        }

        return new CachedValue($userGroups, $tags);
    }

    public function loadUsersFromGroup($groupPath, Request $request)
    {
        $users = $this->innerController->loadUsersFromGroup($groupPath, $request);

        $tags = [];
        foreach ($users->users as $user) {
            $tags = array_merge_recursive(
                $tags,
                $this->getCacheTagsForContentInfo($user->contentInfo)
            );
        }

        return new CachedValue($users, $tags);
    }

    public function unassignUserFromUserGroup($userId, $groupPath)
    {
        return $this->innerController->unassignUserFromUserGroup($userId, $groupPath);
    }

    public function assignUserToUserGroup($userId, Request $request)
    {
        return $this->innerController->assignUserToUserGroup($userId, $request);
    }

    public function createSession(Request $request)
    {
        return $this->innerController->createSession($request);
    }

    public function refreshSession($sessionId, Request $request)
    {
        return $this->innerController->refreshSession($sessionId, $request);
    }

    public function deleteSession($sessionId, Request $request)
    {
        return $this->innerController->deleteSession($sessionId, $request);
    }
}
